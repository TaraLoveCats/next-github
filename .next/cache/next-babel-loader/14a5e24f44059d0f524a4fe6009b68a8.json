{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Row from \"antd/lib/row\";\nimport _Col from \"antd/lib/col\";\nimport _List from \"antd/lib/list\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter, Router } from 'next/router';\nimport Link from 'next/link';\n\nvar api = require('../lib/api');\n\nvar LANGUAGES = ['JavaScript', 'TypeScript', 'HTML', 'CSS', 'Java', 'Rust', 'Python'];\nvar SORT_TYPES = [{\n  name: 'Best Match'\n}, {\n  name: 'Most Stars',\n  value: 'stars',\n  order: 'desc'\n}, {\n  name: 'Fewest Stars',\n  value: 'stars',\n  order: 'asc'\n}, {\n  name: 'Most Forks',\n  value: 'forks',\n  order: 'desc'\n}, {\n  name: 'Fewest Forks',\n  value: 'forks',\n  order: 'asc'\n}];\nvar selectedItemStyle = {\n  borderLeft: '2px solid #e36209',\n  fontWeight: 100\n};\nexport default function Search(_ref) {\n  var repos = _ref.repos;\n  var router = useRouter();\n  var _router$query = router.query,\n      sort = _router$query.sort,\n      order = _router$query.order,\n      lang = _router$query.lang,\n      query = _router$query.query;\n\n  var handleLanguageChange = function handleLanguageChange(language) {\n    Router.push({\n      pathname: '/search',\n      query: {\n        query: query,\n        lang: language,\n        sort: sort,\n        order: order\n      }\n    });\n  };\n\n  var handleSortChange = function handleSortChange(sort) {\n    Router.push({\n      pathname: '/search',\n      query: {\n        query: query,\n        lang: lang,\n        sort: sort,\n        order: order\n      }\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(_Row, {\n    gutter: 20\n  }, __jsx(_Col, {\n    span: 6\n  }, __jsx(_List, {\n    bordered: true,\n    header: __jsx(\"span\", {\n      className: \"list-header\"\n    }, \"Languages\"),\n    style: {\n      marginBottom: 20\n    },\n    dataSource: LANGUAGES,\n    renderItem: function renderItem(item) {\n      var selected = item === lang;\n      return __jsx(_List.Item, {\n        style: selected ? selectedItemStyle : null\n      }, __jsx(\"a\", {\n        onClick: function onClick() {\n          return handleLanguageChange(item);\n        }\n      }, item));\n    }\n  }), __jsx(_List, {\n    bordered: true,\n    header: __jsx(\"span\", {\n      className: \"list-header\"\n    }, \"Sort By\"),\n    dataSource: SORT_TYPES,\n    renderItem: function renderItem(item) {\n      var selected;\n\n      if (item.name === 'Best Match' && !sort) {\n        selected = true;\n      } else if (item.name === sort && item.order === order) {\n        selected = true;\n      }\n\n      return __jsx(_List.Item, {\n        style: selected ? selectedItemStyle : null\n      }, __jsx(\"a\", {\n        onClick: function onClick() {\n          return handleSortChange(item);\n        }\n      }, item.name));\n    }\n  }))));\n}\n\nSearch.getInitialProps = function _callee(_ref2) {\n  var ctx, _ctx$query, query, sort, lang, order, page, queryString, result;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          ctx = _ref2.ctx;\n          console.log('Search getInitialProps called');\n          _ctx$query = ctx.query, query = _ctx$query.query, sort = _ctx$query.sort, lang = _ctx$query.lang, order = _ctx$query.order, page = _ctx$query.page;\n\n          if (query) {\n            _context.next = 5;\n            break;\n          }\n\n          return _context.abrupt(\"return\", {\n            repos: {\n              total_count: 0\n            }\n          });\n\n        case 5:\n          // ?q=react+language:javascript&sort=stars&order=desc&page=2\n          queryString = \"/?q=\".concat(query);\n          lang && (queryString += \"+language:\".concat(lang));\n          sort && (queryString += \"&sort=\".concat(sort, \"&order=\").concat(order || 'desc'));\n          page && (queryString += \"&page=\".concat(page));\n          result = api.request({\n            url: \"/search/repositories\".concat(queryString)\n          }, ctx.req, ctx.res);\n          return _context.abrupt(\"return\", {\n            repos: result.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};","map":{"version":3,"sources":["D:/编程/项目/next项目/next-github/pages/search.js"],"names":["useRouter","Router","Link","api","require","LANGUAGES","SORT_TYPES","name","value","order","selectedItemStyle","borderLeft","fontWeight","Search","repos","router","query","sort","lang","handleLanguageChange","language","push","pathname","handleSortChange","marginBottom","item","selected","getInitialProps","ctx","console","log","page","total_count","queryString","result","request","url","req","res","data"],"mappings":";;;;;;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,aAAlC;AAEA,OAAOC,IAAP,MAAiB,WAAjB;;AACA,IAAMC,GAAG,GAAGC,OAAO,CAAC,YAAD,CAAnB;;AAEA,IAAMC,SAAS,GAAG,CAAC,YAAD,EAAe,YAAf,EAA6B,MAA7B,EAAqC,KAArC,EAA4C,MAA5C,EAAoD,MAApD,EAA4D,QAA5D,CAAlB;AACA,IAAMC,UAAU,GAAG,CACjB;AACEC,EAAAA,IAAI,EAAE;AADR,CADiB,EAIjB;AACEA,EAAAA,IAAI,EAAE,YADR;AAEEC,EAAAA,KAAK,EAAE,OAFT;AAGEC,EAAAA,KAAK,EAAE;AAHT,CAJiB,EASjB;AACEF,EAAAA,IAAI,EAAE,cADR;AAEEC,EAAAA,KAAK,EAAE,OAFT;AAGEC,EAAAA,KAAK,EAAE;AAHT,CATiB,EAcjB;AACEF,EAAAA,IAAI,EAAE,YADR;AAEEC,EAAAA,KAAK,EAAE,OAFT;AAGEC,EAAAA,KAAK,EAAE;AAHT,CAdiB,EAmBjB;AACEF,EAAAA,IAAI,EAAE,cADR;AAEEC,EAAAA,KAAK,EAAE,OAFT;AAGEC,EAAAA,KAAK,EAAE;AAHT,CAnBiB,CAAnB;AAyBA,IAAMC,iBAAiB,GAAG;AACtBC,EAAAA,UAAU,EAAE,mBADU;AAEtBC,EAAAA,UAAU,EAAE;AAFU,CAA1B;AAKA,eAAe,SAASC,MAAT,OAA2B;AAAA,MAATC,KAAS,QAATA,KAAS;AACtC,MAAMC,MAAM,GAAGf,SAAS,EAAxB;AADsC,sBAEDe,MAAM,CAACC,KAFN;AAAA,MAE9BC,IAF8B,iBAE9BA,IAF8B;AAAA,MAExBR,KAFwB,iBAExBA,KAFwB;AAAA,MAEjBS,IAFiB,iBAEjBA,IAFiB;AAAA,MAEXF,KAFW,iBAEXA,KAFW;;AAItC,MAAMG,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,QAAD,EAAc;AACvCnB,IAAAA,MAAM,CAACoB,IAAP,CAAY;AACRC,MAAAA,QAAQ,EAAE,SADF;AAERN,MAAAA,KAAK,EAAE;AACHA,QAAAA,KAAK,EAALA,KADG;AAEHE,QAAAA,IAAI,EAAEE,QAFH;AAGHH,QAAAA,IAAI,EAAJA,IAHG;AAIHR,QAAAA,KAAK,EAALA;AAJG;AAFC,KAAZ;AASH,GAVD;;AAWA,MAAMc,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACN,IAAD,EAAU;AAC/BhB,IAAAA,MAAM,CAACoB,IAAP,CAAY;AACRC,MAAAA,QAAQ,EAAE,SADF;AAERN,MAAAA,KAAK,EAAE;AACHA,QAAAA,KAAK,EAALA,KADG;AAEHE,QAAAA,IAAI,EAAJA,IAFG;AAGHD,QAAAA,IAAI,EAAEA,IAHH;AAIHR,QAAAA,KAAK,EAALA;AAJG;AAFC,KAAZ;AASH,GAVD;;AAYA,SACI,4BACI;AAAK,IAAA,MAAM,EAAE;AAAb,KACI;AAAK,IAAA,IAAI,EAAE;AAAX,KACI;AACI,IAAA,QAAQ,MADZ;AAEI,IAAA,MAAM,EAAE;AAAM,MAAA,SAAS,EAAC;AAAhB,mBAFZ;AAGI,IAAA,KAAK,EAAE;AAAEe,MAAAA,YAAY,EAAE;AAAhB,KAHX;AAII,IAAA,UAAU,EAAEnB,SAJhB;AAKI,IAAA,UAAU,EAAE,oBAAAoB,IAAI,EAAI;AAChB,UAAMC,QAAQ,GAAGD,IAAI,KAAKP,IAA1B;AACA,aACI,YAAM,IAAN;AAAW,QAAA,KAAK,EAAEQ,QAAQ,GAAGhB,iBAAH,GAAuB;AAAjD,SAEQ;AAAG,QAAA,OAAO,EAAE;AAAA,iBAAMS,oBAAoB,CAACM,IAAD,CAA1B;AAAA;AAAZ,SAA+CA,IAA/C,CAFR,CADJ;AAMF;AAbN,IADJ,EAiBI;AACI,IAAA,QAAQ,MADZ;AAEI,IAAA,MAAM,EAAE;AAAM,MAAA,SAAS,EAAC;AAAhB,iBAFZ;AAGI,IAAA,UAAU,EAAEnB,UAHhB;AAII,IAAA,UAAU,EAAE,oBAAAmB,IAAI,EAAI;AAChB,UAAIC,QAAJ;;AACA,UAAID,IAAI,CAAClB,IAAL,KAAc,YAAd,IAA8B,CAACU,IAAnC,EAAyC;AACrCS,QAAAA,QAAQ,GAAG,IAAX;AACH,OAFD,MAEO,IAAID,IAAI,CAAClB,IAAL,KAAcU,IAAd,IAAsBQ,IAAI,CAAChB,KAAL,KAAeA,KAAzC,EAAgD;AACnDiB,QAAAA,QAAQ,GAAG,IAAX;AACH;;AACD,aACI,YAAM,IAAN;AAAW,QAAA,KAAK,EAAEA,QAAQ,GAAGhB,iBAAH,GAAuB;AAAjD,SAEQ;AAAG,QAAA,OAAO,EAAE;AAAA,iBAAMa,gBAAgB,CAACE,IAAD,CAAtB;AAAA;AAAZ,SAA2CA,IAAI,CAAClB,IAAhD,CAFR,CADJ;AAMF;AAjBN,IAjBJ,CADJ,CADJ,CADJ;AA2CH;;AAEDM,MAAM,CAACc,eAAP,GAAyB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,GAAT,SAASA,GAAT;AACrBC,UAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AADqB,uBAEqBF,GAAG,CAACZ,KAFzB,EAEbA,KAFa,cAEbA,KAFa,EAENC,IAFM,cAENA,IAFM,EAEAC,IAFA,cAEAA,IAFA,EAEMT,KAFN,cAEMA,KAFN,EAEasB,IAFb,cAEaA,IAFb;;AAAA,cAGhBf,KAHgB;AAAA;AAAA;AAAA;;AAAA,2CAIV;AACHF,YAAAA,KAAK,EAAE;AACHkB,cAAAA,WAAW,EAAE;AADV;AADJ,WAJU;;AAAA;AAUrB;AACIC,UAAAA,WAXiB,iBAWIjB,KAXJ;AAYrBE,UAAAA,IAAI,KAAKe,WAAW,wBAAiBf,IAAjB,CAAhB,CAAJ;AACAD,UAAAA,IAAI,KAAKgB,WAAW,oBAAahB,IAAb,oBAA2BR,KAAK,IAAI,MAApC,CAAhB,CAAJ;AACAsB,UAAAA,IAAI,KAAKE,WAAW,oBAAaF,IAAb,CAAhB,CAAJ;AAEMG,UAAAA,MAhBe,GAgBN/B,GAAG,CAACgC,OAAJ,CAAY;AACvBC,YAAAA,GAAG,gCAAyBH,WAAzB;AADoB,WAAZ,EAEZL,GAAG,CAACS,GAFQ,EAEHT,GAAG,CAACU,GAFD,CAhBM;AAAA,2CAoBd;AACHxB,YAAAA,KAAK,EAAEoB,MAAM,CAACK;AADX,WApBc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB","sourcesContent":["import { useRouter, Router } from 'next/router'\r\nimport { Row, Col, List } from 'antd'\r\nimport Link from 'next/link'\r\nconst api = require('../lib/api')\r\n\r\nconst LANGUAGES = ['JavaScript', 'TypeScript', 'HTML', 'CSS', 'Java', 'Rust', 'Python'];\r\nconst SORT_TYPES = [\r\n  {\r\n    name: 'Best Match',\r\n  },\r\n  {\r\n    name: 'Most Stars',\r\n    value: 'stars',\r\n    order: 'desc',\r\n  },\r\n  {\r\n    name: 'Fewest Stars',\r\n    value: 'stars',\r\n    order: 'asc',\r\n  },\r\n  {\r\n    name: 'Most Forks',\r\n    value: 'forks',\r\n    order: 'desc',\r\n  },\r\n  {\r\n    name: 'Fewest Forks',\r\n    value: 'forks',\r\n    order: 'asc',\r\n  },\r\n];\r\nconst selectedItemStyle = {\r\n    borderLeft: '2px solid #e36209',\r\n    fontWeight: 100,\r\n  }\r\n\r\nexport default function Search({ repos }) {\r\n    const router = useRouter();\r\n    const { sort, order, lang, query } = router.query\r\n\r\n    const handleLanguageChange = (language) => {\r\n        Router.push({\r\n            pathname: '/search',\r\n            query: {\r\n                query,\r\n                lang: language,\r\n                sort,\r\n                order,\r\n            }\r\n        })\r\n    }\r\n    const handleSortChange = (sort) => {\r\n        Router.push({\r\n            pathname: '/search',\r\n            query: {\r\n                query,\r\n                lang,\r\n                sort: sort,\r\n                order,\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row gutter={20}>\r\n                <Col span={6}>\r\n                    <List \r\n                        bordered\r\n                        header={<span className=\"list-header\">Languages</span>}\r\n                        style={{ marginBottom: 20 }}\r\n                        dataSource={LANGUAGES}\r\n                        renderItem={item => {\r\n                            const selected = item === lang;\r\n                            return  (\r\n                                <List.Item style={selected ? selectedItemStyle : null}>\r\n                                    {/* <Link href=\"/search\"> */}\r\n                                        <a onClick={() => handleLanguageChange(item)}>{item}</a>\r\n                                    {/* </Link> */}\r\n                                </List.Item>\r\n                        )}}\r\n                    />\r\n\r\n                    <List \r\n                        bordered\r\n                        header={<span className=\"list-header\">Sort By</span>}\r\n                        dataSource={SORT_TYPES}\r\n                        renderItem={item => {\r\n                            let selected;\r\n                            if (item.name === 'Best Match' && !sort) {\r\n                                selected = true;\r\n                            } else if (item.name === sort && item.order === order) {\r\n                                selected = true;\r\n                            }\r\n                            return (\r\n                                <List.Item style={selected ? selectedItemStyle : null}>\r\n                                    {/* <Link href=\"/search\"> */}\r\n                                        <a onClick={() => handleSortChange(item)}>{item.name}</a>\r\n                                    {/* </Link> */}\r\n                                </List.Item>\r\n                        )}}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nSearch.getInitialProps = async ({ ctx }) => {\r\n    console.log('Search getInitialProps called')\r\n    const { query, sort, lang, order, page} = ctx.query\r\n    if (!query) {\r\n        return {\r\n            repos: {\r\n                total_count: 0\r\n            }\r\n        }\r\n    }\r\n    // ?q=react+language:javascript&sort=stars&order=desc&page=2\r\n    let queryString = `/?q=${query}`;\r\n    lang && (queryString += `+language:${lang}`);\r\n    sort && (queryString += `&sort=${sort}&order=${order || 'desc'}`);\r\n    page && (queryString += `&page=${page}`);\r\n\r\n    const result = api.request({\r\n        url: `/search/repositories${queryString}`\r\n    }, ctx.req, ctx.res)\r\n\r\n    return {\r\n        repos: result.data\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}