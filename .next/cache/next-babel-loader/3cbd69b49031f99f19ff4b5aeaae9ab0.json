{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport axios from 'axios';\nconst userInitialState = {};\nconst LOGOUT = 'LOGOUT'; //thunk\n\nexport function logout() {\n  return dispatch => {\n    axios.post('/logout').then(resp => {\n      if (resp.status === 200) {\n        dispatch({\n          type: LOGOUT\n        });\n      } else {\n        console.log('logout failed', resp);\n      }\n    }).catch(err => {\n      console.log('logout failed', err);\n    });\n  };\n}\n\nfunction userReducer(state = userInitialState, action) {\n  switch (action.type) {\n    case LOGOUT:\n      return {};\n\n    default:\n      return state;\n  }\n}\n\nconst allReducers = combineReducers({\n  user: userReducer\n}); //export一个创建store的函数，每次生成的store都是新的\n\nexport default function initializeStore(state) {\n  const store = createStore(allReducers, _objectSpread({\n    user: userInitialState\n  }, state), composeWithDevTools(applyMiddleware(ReduxThunk)));\n  return store;\n}","map":{"version":3,"sources":["D:/编程/项目/next项目/next-github/store/store.js"],"names":["createStore","combineReducers","applyMiddleware","ReduxThunk","composeWithDevTools","axios","userInitialState","LOGOUT","logout","dispatch","post","then","resp","status","type","console","log","catch","err","userReducer","state","action","allReducers","user","initializeStore","store"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,gBAAgB,GAAG,EAAzB;AACA,MAAMC,MAAM,GAAG,QAAf,C,CAEA;;AACA,OAAO,SAASC,MAAT,GAAkB;AACxB,SAAOC,QAAQ,IAAI;AAClBJ,IAAAA,KAAK,CAACK,IAAN,CAAW,SAAX,EACEC,IADF,CACOC,IAAI,IAAI;AACb,UAAIA,IAAI,CAACC,MAAL,KAAgB,GAApB,EAAyB;AACxBJ,QAAAA,QAAQ,CAAC;AAAEK,UAAAA,IAAI,EAAEP;AAAR,SAAD,CAAR;AACA,OAFD,MAEO;AACNQ,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BJ,IAA7B;AACA;AACD,KAPF,EAQEK,KARF,CAQQC,GAAG,IAAI;AACbH,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BE,GAA7B;AACA,KAVF;AAYA,GAbD;AAcA;;AAED,SAASC,WAAT,CAAqBC,KAAK,GAAGd,gBAA7B,EAA+Ce,MAA/C,EAAuD;AACtD,UAAQA,MAAM,CAACP,IAAf;AACC,SAAKP,MAAL;AACC,aAAO,EAAP;;AACD;AACC,aAAOa,KAAP;AAJF;AAMA;;AAED,MAAME,WAAW,GAAGrB,eAAe,CAAC;AACnCsB,EAAAA,IAAI,EAAEJ;AAD6B,CAAD,CAAnC,C,CAIA;;AACA,eAAe,SAASK,eAAT,CAAyBJ,KAAzB,EAAgC;AAC9C,QAAMK,KAAK,GAAGzB,WAAW,CACxBsB,WADwB;AAEtBC,IAAAA,IAAI,EAAEjB;AAFgB,KAEKc,KAFL,GAGxBhB,mBAAmB,CAACF,eAAe,CAACC,UAAD,CAAhB,CAHK,CAAzB;AAMA,SAAOsB,KAAP;AACA","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport ReduxThunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport axios from 'axios'\r\n\r\nconst userInitialState = {}\r\nconst LOGOUT = 'LOGOUT'\r\n\r\n//thunk\r\nexport function logout() {\r\n\treturn dispatch => {\r\n\t\taxios.post('/logout')\r\n\t\t\t.then(resp => {\r\n\t\t\t\tif (resp.status === 200) {\r\n\t\t\t\t\tdispatch({ type: LOGOUT })\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconsole.log('logout failed', resp)\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.catch(err => {\r\n\t\t\t\tconsole.log('logout failed', err)\r\n\t\t\t})\r\n\t\t\t\r\n\t}\r\n}\r\n\r\nfunction userReducer(state = userInitialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase LOGOUT:\r\n\t\t\treturn {}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nconst allReducers = combineReducers({\r\n\tuser: userReducer,\r\n})\r\n\r\n//export一个创建store的函数，每次生成的store都是新的\r\nexport default function initializeStore(state) {\r\n\tconst store = createStore(\r\n\t\tallReducers,\r\n\t\t{ user: userInitialState, ...state },\r\n\t\tcomposeWithDevTools(applyMiddleware(ReduxThunk)),\r\n\t)\r\n\r\n\treturn store\r\n}"]},"metadata":{},"sourceType":"module"}