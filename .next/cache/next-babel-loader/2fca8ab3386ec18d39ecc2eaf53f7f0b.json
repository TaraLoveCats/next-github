{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Row from \"antd/lib/row\";\nimport _Col from \"antd/lib/col\";\nimport _List from \"antd/lib/list\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport { memo } from 'react';\nimport Link from 'next/link';\n\nvar api = require('../lib/api');\n\nvar LANGUAGES = ['JavaScript', 'TypeScript', 'HTML', 'CSS', 'Java', 'Rust', 'Python'];\nvar SORT_TYPES = [{\n  name: 'Best Match'\n}, {\n  name: 'Most Stars',\n  value: 'stars',\n  order: 'desc'\n}, {\n  name: 'Fewest Stars',\n  value: 'stars',\n  order: 'asc'\n}, {\n  name: 'Most Forks',\n  value: 'forks',\n  order: 'desc'\n}, {\n  name: 'Fewest Forks',\n  value: 'forks',\n  order: 'asc'\n}];\nvar selectedItemStyle = {\n  borderLeft: '2px solid #e36209',\n  fontWeight: 100\n};\nvar FilterLink = memo(function (_ref) {\n  var name = _ref.name,\n      query = _ref.query,\n      lang = _ref.lang,\n      sort = _ref.sort,\n      order = _ref.order;\n  var queryString = \"?query=\".concat(query);\n  lang && (queryString += \"&lang=\".concat(lang));\n  sort && (queryString += \"&sort=\".concat(sort, \"&order=\").concat(order || 'desc')); // page && (queryString += `&page=${page}`);\n\n  return __jsx(Link, {\n    href: \"/search\".concat(queryString)\n  }, __jsx(\"a\", null, name));\n});\nexport default function Search(_ref2) {\n  var repos = _ref2.repos;\n  var router = useRouter();\n\n  var querys = _extends({}, router.query);\n\n  var _router$query = router.query,\n      sort = _router$query.sort,\n      order = _router$query.order,\n      lang = _router$query.lang;\n  return __jsx(React.Fragment, null, __jsx(_Row, {\n    gutter: 20\n  }, __jsx(_Col, {\n    span: 6\n  }, __jsx(_List, {\n    bordered: true,\n    header: __jsx(\"span\", {\n      className: \"list-header\"\n    }, \"Languages\"),\n    style: {\n      marginBottom: 20\n    },\n    dataSource: LANGUAGES,\n    renderItem: function renderItem(item) {\n      var selected = item === lang;\n      return __jsx(_List.Item, {\n        style: selected ? selectedItemStyle : null\n      }, selected ? __jsx(\"span\", null, item) : __jsx(FilterLink, _extends({}, querys, {\n        lang: lang,\n        name: item\n      })));\n    }\n  }), __jsx(_List, {\n    bordered: true,\n    header: __jsx(\"span\", {\n      className: \"list-header\"\n    }, \"Sort By\"),\n    dataSource: SORT_TYPES,\n    renderItem: function renderItem(item) {\n      var selected;\n\n      if (item.name === 'Best Match' && !sort) {\n        selected = true;\n      } else if (item.name === sort && item.order === order) {\n        selected = true;\n      }\n\n      return __jsx(_List.Item, {\n        style: selected ? selectedItemStyle : null\n      }, selected ? __jsx(\"span\", null, item.name) : __jsx(FilterLink, _extends({}, querys, {\n        name: item.name,\n        sort: item.sort,\n        order: item.order\n      })));\n    }\n  }))));\n}\n\nSearch.getInitialProps = function _callee(_ref3) {\n  var query, req, res, q, sort, lang, order, page, queryString, result;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref3.query, req = _ref3.req, res = _ref3.res;\n          console.log('Search getInitialProps called');\n          q = query.q, sort = query.sort, lang = query.lang, order = query.order, page = query.page;\n\n          if (q) {\n            _context.next = 5;\n            break;\n          }\n\n          return _context.abrupt(\"return\", {\n            repos: {\n              total_count: 0\n            }\n          });\n\n        case 5:\n          // ?q=react+language:javascript&sort=stars&order=desc&page=2\n          queryString = \"?q=\".concat(q);\n          lang && (queryString += \"+language:\".concat(lang));\n          sort && (queryString += \"&sort=\".concat(sort, \"&order=\").concat(order || 'desc'));\n          page && (queryString += \"&page=\".concat(page));\n          result = api.request({\n            url: \"/search/repositories\".concat(queryString)\n          }, req, res);\n          return _context.abrupt(\"return\", {\n            repos: result.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};","map":{"version":3,"sources":["D:/编程/项目/next项目/next-github/pages/search.js"],"names":["useRouter","memo","Link","api","require","LANGUAGES","SORT_TYPES","name","value","order","selectedItemStyle","borderLeft","fontWeight","FilterLink","query","lang","sort","queryString","Search","repos","router","querys","marginBottom","item","selected","getInitialProps","req","res","console","log","q","page","total_count","result","request","url","data"],"mappings":";;;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,IAAT,QAAqB,OAArB;AAEA,OAAOC,IAAP,MAAiB,WAAjB;;AACA,IAAMC,GAAG,GAAGC,OAAO,CAAC,YAAD,CAAnB;;AAEA,IAAMC,SAAS,GAAG,CAAC,YAAD,EAAe,YAAf,EAA6B,MAA7B,EAAqC,KAArC,EAA4C,MAA5C,EAAoD,MAApD,EAA4D,QAA5D,CAAlB;AACA,IAAMC,UAAU,GAAG,CACjB;AACEC,EAAAA,IAAI,EAAE;AADR,CADiB,EAIjB;AACEA,EAAAA,IAAI,EAAE,YADR;AAEEC,EAAAA,KAAK,EAAE,OAFT;AAGEC,EAAAA,KAAK,EAAE;AAHT,CAJiB,EASjB;AACEF,EAAAA,IAAI,EAAE,cADR;AAEEC,EAAAA,KAAK,EAAE,OAFT;AAGEC,EAAAA,KAAK,EAAE;AAHT,CATiB,EAcjB;AACEF,EAAAA,IAAI,EAAE,YADR;AAEEC,EAAAA,KAAK,EAAE,OAFT;AAGEC,EAAAA,KAAK,EAAE;AAHT,CAdiB,EAmBjB;AACEF,EAAAA,IAAI,EAAE,cADR;AAEEC,EAAAA,KAAK,EAAE,OAFT;AAGEC,EAAAA,KAAK,EAAE;AAHT,CAnBiB,CAAnB;AAyBA,IAAMC,iBAAiB,GAAG;AACtBC,EAAAA,UAAU,EAAE,mBADU;AAEtBC,EAAAA,UAAU,EAAE;AAFU,CAA1B;AAKA,IAAMC,UAAU,GAAGZ,IAAI,CAAC,gBAAwC;AAAA,MAArCM,IAAqC,QAArCA,IAAqC;AAAA,MAA/BO,KAA+B,QAA/BA,KAA+B;AAAA,MAAxBC,IAAwB,QAAxBA,IAAwB;AAAA,MAAlBC,IAAkB,QAAlBA,IAAkB;AAAA,MAAZP,KAAY,QAAZA,KAAY;AAC5D,MAAIQ,WAAW,oBAAaH,KAAb,CAAf;AACAC,EAAAA,IAAI,KAAKE,WAAW,oBAAaF,IAAb,CAAhB,CAAJ;AACAC,EAAAA,IAAI,KAAKC,WAAW,oBAAaD,IAAb,oBAA2BP,KAAK,IAAI,MAApC,CAAhB,CAAJ,CAH4D,CAI5D;;AACA,SACI,MAAC,IAAD;AAAM,IAAA,IAAI,mBAAYQ,WAAZ;AAAV,KACI,iBAAIV,IAAJ,CADJ,CADJ;AAKH,CAVsB,CAAvB;AAYA,eAAe,SAASW,MAAT,QAA2B;AAAA,MAATC,KAAS,SAATA,KAAS;AACtC,MAAMC,MAAM,GAAGpB,SAAS,EAAxB;;AADsC,MAE3BqB,MAF2B,gBAEhBD,MAAM,CAACN,KAFS;;AAAA,sBAGRM,MAAM,CAACN,KAHC;AAAA,MAG9BE,IAH8B,iBAG9BA,IAH8B;AAAA,MAGxBP,KAHwB,iBAGxBA,KAHwB;AAAA,MAGjBM,IAHiB,iBAGjBA,IAHiB;AAKtC,SACI,4BACI;AAAK,IAAA,MAAM,EAAE;AAAb,KACI;AAAK,IAAA,IAAI,EAAE;AAAX,KACI;AACI,IAAA,QAAQ,MADZ;AAEI,IAAA,MAAM,EAAE;AAAM,MAAA,SAAS,EAAC;AAAhB,mBAFZ;AAGI,IAAA,KAAK,EAAE;AAAEO,MAAAA,YAAY,EAAE;AAAhB,KAHX;AAII,IAAA,UAAU,EAAEjB,SAJhB;AAKI,IAAA,UAAU,EAAE,oBAAAkB,IAAI,EAAI;AAChB,UAAMC,QAAQ,GAAGD,IAAI,KAAKR,IAA1B;AACA,aACI,YAAM,IAAN;AAAW,QAAA,KAAK,EAAES,QAAQ,GAAGd,iBAAH,GAAuB;AAAjD,SACKc,QAAQ,GAAG,oBAAOD,IAAP,CAAH,GACL,MAAC,UAAD,eACQF,MADR;AAEI,QAAA,IAAI,EAAEN,IAFV;AAGI,QAAA,IAAI,EAAEQ;AAHV,SAFR,CADJ;AAUF;AAjBN,IADJ,EAqBI;AACI,IAAA,QAAQ,MADZ;AAEI,IAAA,MAAM,EAAE;AAAM,MAAA,SAAS,EAAC;AAAhB,iBAFZ;AAGI,IAAA,UAAU,EAAEjB,UAHhB;AAII,IAAA,UAAU,EAAE,oBAAAiB,IAAI,EAAI;AAChB,UAAIC,QAAJ;;AACA,UAAID,IAAI,CAAChB,IAAL,KAAc,YAAd,IAA8B,CAACS,IAAnC,EAAyC;AACrCQ,QAAAA,QAAQ,GAAG,IAAX;AACH,OAFD,MAEO,IAAID,IAAI,CAAChB,IAAL,KAAcS,IAAd,IAAsBO,IAAI,CAACd,KAAL,KAAeA,KAAzC,EAAgD;AACnDe,QAAAA,QAAQ,GAAG,IAAX;AACH;;AACD,aACI,YAAM,IAAN;AAAW,QAAA,KAAK,EAAEA,QAAQ,GAAGd,iBAAH,GAAuB;AAAjD,SACCc,QAAQ,GAAG,oBAAOD,IAAI,CAAChB,IAAZ,CAAH,GACL,MAAC,UAAD,eACQc,MADR;AAEI,QAAA,IAAI,EAAEE,IAAI,CAAChB,IAFf;AAGI,QAAA,IAAI,EAAEgB,IAAI,CAACP,IAHf;AAII,QAAA,KAAK,EAAEO,IAAI,CAACd;AAJhB,SAFJ,CADJ;AAWF;AAtBN,IArBJ,CADJ,CADJ,CADJ;AAoDH;;AAEDS,MAAM,CAACO,eAAP,GAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASX,UAAAA,KAAT,SAASA,KAAT,EAAgBY,GAAhB,SAAgBA,GAAhB,EAAqBC,GAArB,SAAqBA,GAArB;AACrBC,UAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACQC,UAAAA,CAFa,GAEiBhB,KAFjB,CAEbgB,CAFa,EAEVd,IAFU,GAEiBF,KAFjB,CAEVE,IAFU,EAEJD,IAFI,GAEiBD,KAFjB,CAEJC,IAFI,EAEEN,KAFF,GAEiBK,KAFjB,CAEEL,KAFF,EAESsB,IAFT,GAEiBjB,KAFjB,CAESiB,IAFT;;AAAA,cAGhBD,CAHgB;AAAA;AAAA;AAAA;;AAAA,2CAIV;AACHX,YAAAA,KAAK,EAAE;AACHa,cAAAA,WAAW,EAAE;AADV;AADJ,WAJU;;AAAA;AAUrB;AACIf,UAAAA,WAXiB,gBAWGa,CAXH;AAYrBf,UAAAA,IAAI,KAAKE,WAAW,wBAAiBF,IAAjB,CAAhB,CAAJ;AACAC,UAAAA,IAAI,KAAKC,WAAW,oBAAaD,IAAb,oBAA2BP,KAAK,IAAI,MAApC,CAAhB,CAAJ;AACAsB,UAAAA,IAAI,KAAKd,WAAW,oBAAac,IAAb,CAAhB,CAAJ;AAEME,UAAAA,MAhBe,GAgBN9B,GAAG,CAAC+B,OAAJ,CAAY;AACvBC,YAAAA,GAAG,gCAAyBlB,WAAzB;AADoB,WAAZ,EAEZS,GAFY,EAEPC,GAFO,CAhBM;AAAA,2CAoBd;AACHR,YAAAA,KAAK,EAAEc,MAAM,CAACG;AADX,WApBc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB","sourcesContent":["import { useRouter } from 'next/router'\r\nimport { memo } from 'react'\r\nimport { Row, Col, List } from 'antd'\r\nimport Link from 'next/link'\r\nconst api = require('../lib/api')\r\n\r\nconst LANGUAGES = ['JavaScript', 'TypeScript', 'HTML', 'CSS', 'Java', 'Rust', 'Python'];\r\nconst SORT_TYPES = [\r\n  {\r\n    name: 'Best Match',\r\n  },\r\n  {\r\n    name: 'Most Stars',\r\n    value: 'stars',\r\n    order: 'desc',\r\n  },\r\n  {\r\n    name: 'Fewest Stars',\r\n    value: 'stars',\r\n    order: 'asc',\r\n  },\r\n  {\r\n    name: 'Most Forks',\r\n    value: 'forks',\r\n    order: 'desc',\r\n  },\r\n  {\r\n    name: 'Fewest Forks',\r\n    value: 'forks',\r\n    order: 'asc',\r\n  },\r\n];\r\nconst selectedItemStyle = {\r\n    borderLeft: '2px solid #e36209',\r\n    fontWeight: 100,\r\n  }\r\n\r\nconst FilterLink = memo(({ name, query, lang, sort, order }) => {\r\n    let queryString = `?query=${query}`;\r\n    lang && (queryString += `&lang=${lang}`);\r\n    sort && (queryString += `&sort=${sort}&order=${order || 'desc'}`);\r\n    // page && (queryString += `&page=${page}`);\r\n    return (\r\n        <Link href={`/search${queryString}`}>\r\n            <a>{name}</a>\r\n        </Link>\r\n    )\r\n})\r\n\r\nexport default function Search({ repos }) {\r\n    const router = useRouter();\r\n    const { ...querys } = router.query;\r\n    const { sort, order, lang } = router.query;\r\n\r\n    return (\r\n        <>\r\n            <Row gutter={20}>\r\n                <Col span={6}>\r\n                    <List \r\n                        bordered\r\n                        header={<span className=\"list-header\">Languages</span>}\r\n                        style={{ marginBottom: 20 }}\r\n                        dataSource={LANGUAGES}\r\n                        renderItem={item => {\r\n                            const selected = item === lang;\r\n                            return  (\r\n                                <List.Item style={selected ? selectedItemStyle : null}>\r\n                                    {selected ? <span>{item}</span> : \r\n                                        <FilterLink \r\n                                            {...querys}\r\n                                            lang={lang}\r\n                                            name={item}\r\n                                        />\r\n                                    }\r\n                                </List.Item>\r\n                        )}}\r\n                    />\r\n\r\n                    <List \r\n                        bordered\r\n                        header={<span className=\"list-header\">Sort By</span>}\r\n                        dataSource={SORT_TYPES}\r\n                        renderItem={item => {\r\n                            let selected;\r\n                            if (item.name === 'Best Match' && !sort) {\r\n                                selected = true;\r\n                            } else if (item.name === sort && item.order === order) {\r\n                                selected = true;\r\n                            }\r\n                            return (\r\n                                <List.Item style={selected ? selectedItemStyle : null}>\r\n                                {selected ? <span>{item.name}</span> : \r\n                                    <FilterLink \r\n                                        {...querys}\r\n                                        name={item.name}\r\n                                        sort={item.sort}\r\n                                        order={item.order}\r\n                                    />\r\n                                }\r\n                                </List.Item>\r\n                        )}}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nSearch.getInitialProps = async ({ query, req, res }) => {\r\n    console.log('Search getInitialProps called')\r\n    const { q, sort, lang, order, page} = query\r\n    if (!q) {\r\n        return {\r\n            repos: {\r\n                total_count: 0\r\n            }\r\n        }\r\n    }\r\n    // ?q=react+language:javascript&sort=stars&order=desc&page=2\r\n    let queryString = `?q=${q}`;\r\n    lang && (queryString += `+language:${lang}`);\r\n    sort && (queryString += `&sort=${sort}&order=${order || 'desc'}`);\r\n    page && (queryString += `&page=${page}`);\r\n\r\n    const result = api.request({\r\n        url: `/search/repositories${queryString}`\r\n    }, req, res)\r\n\r\n    return {\r\n        repos: result.data\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}