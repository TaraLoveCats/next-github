{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport withRepoBasic from '../../components/with-repo-basic';\nimport api from '../../lib/api';\nimport 'github-markdown-css';\nimport Markdown from '../../components/Markdown';\nimport LRU from 'lru-cache';\nvar cache = new LRU({\n  maxAge: 1000 * 60 * 60\n});\n\nfunction Detail(_ref) {\n  var readme = _ref.readme;\n  return __jsx(Markdown, {\n    content: readme.content,\n    isBase64: true\n  });\n}\n\nDetail.getInitialProps = function _callee(_ref2) {\n  var query, req, res, owner, name, fullName, readmeResp;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref2.query, req = _ref2.req, res = _ref2.res;\n          owner = query.owner, name = query.name;\n          fullName = \"\".concat(owner, \"/\").concat(name);\n\n          if (!cache.get(fullName)) {\n            _context.next = 5;\n            break;\n          }\n\n          return _context.abrupt(\"return\", {\n            readme: cache.get(fullName)\n          });\n\n        case 5:\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(api.request({\n            url: \"/repos/\".concat(owner, \"/\").concat(name, \"/readme\")\n          }, req, res));\n\n        case 7:\n          readmeResp = _context.sent;\n          cache.set(fullName, readmeResp.data);\n          return _context.abrupt(\"return\", {\n            readme: readmeResp.data\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withRepoBasic(Detail, 'index');","map":{"version":3,"sources":["D:/编程/项目/next项目/next-github/pages/detail/index.js"],"names":["withRepoBasic","api","Markdown","LRU","cache","maxAge","Detail","readme","content","getInitialProps","query","req","res","owner","name","fullName","get","request","url","readmeResp","set","data"],"mappings":";;;AAAA,OAAOA,aAAP,MAA0B,kCAA1B;AACA,OAAOC,GAAP,MAAgB,eAAhB;AACA,OAAO,qBAAP;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AAEA,IAAMC,KAAK,GAAG,IAAID,GAAJ,CAAQ;AAClBE,EAAAA,MAAM,EAAE,OAAO,EAAP,GAAY;AADF,CAAR,CAAd;;AAGA,SAASC,MAAT,OAA4B;AAAA,MAAVC,MAAU,QAAVA,MAAU;AACxB,SAAO,MAAC,QAAD;AAAU,IAAA,OAAO,EAAEA,MAAM,CAACC,OAA1B;AAAmC,IAAA,QAAQ,EAAE;AAA7C,IAAP;AACH;;AAEDF,MAAM,CAACG,eAAP,GAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,KAAT,SAASA,KAAT,EAAgBC,GAAhB,SAAgBA,GAAhB,EAAqBC,GAArB,SAAqBA,GAArB;AACbC,UAAAA,KADa,GACGH,KADH,CACbG,KADa,EACNC,IADM,GACGJ,KADH,CACNI,IADM;AAEfC,UAAAA,QAFe,aAEDF,KAFC,cAEQC,IAFR;;AAAA,eAGjBV,KAAK,CAACY,GAAN,CAAUD,QAAV,CAHiB;AAAA;AAAA;AAAA;;AAAA,2CAIV;AACHR,YAAAA,MAAM,EAAEH,KAAK,CAACY,GAAN,CAAUD,QAAV;AADL,WAJU;;AAAA;AAAA;AAAA,2CASId,GAAG,CAACgB,OAAJ,CAAY;AACjCC,YAAAA,GAAG,mBAAYL,KAAZ,cAAqBC,IAArB;AAD8B,WAAZ,EAEtBH,GAFsB,EAEjBC,GAFiB,CATJ;;AAAA;AASfO,UAAAA,UATe;AAYrBf,UAAAA,KAAK,CAACgB,GAAN,CAAUL,QAAV,EAAoBI,UAAU,CAACE,IAA/B;AAZqB,2CAcd;AACHd,YAAAA,MAAM,EAAEY,UAAU,CAACE;AADhB,WAdc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;;AAmBA,eAAerB,aAAa,CAACM,MAAD,EAAS,OAAT,CAA5B","sourcesContent":["import withRepoBasic from '../../components/with-repo-basic'\r\nimport api from '../../lib/api'\r\nimport 'github-markdown-css'\r\nimport Markdown from '../../components/Markdown'\r\nimport LRU from 'lru-cache'\r\n\r\nconst cache = new LRU({\r\n    maxAge: 1000 * 60 * 60\r\n})\r\nfunction Detail({ readme }) {\r\n    return <Markdown content={readme.content} isBase64={true} />\r\n}\r\n\r\nDetail.getInitialProps = async ({ query, req, res }) => {\r\n    const { owner, name } = query;\r\n    const fullName = `${owner}/${name}`;\r\n    if (cache.get(fullName)) {\r\n        return {\r\n            readme: cache.get(fullName)\r\n        }\r\n    }\r\n\r\n    const readmeResp = await api.request({\r\n        url: `/repos/${owner}/${name}/readme`\r\n    }, req, res);\r\n    cache.set(fullName, readmeResp.data);\r\n\r\n    return {\r\n        readme: readmeResp.data,\r\n    }\r\n}\r\n\r\nexport default withRepoBasic(Detail, 'index')"]},"metadata":{},"sourceType":"module"}