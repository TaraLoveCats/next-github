{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nconst userInitialState = {};\nconst UPDATE_USERNAME = 'UPDATE_USERNAME';\n\nfunction userReducer(state = userInitialState, action) {\n  switch (action.type) {\n    case UPDATE_USERNAME:\n      return _objectSpread({}, state, {\n        username: action.name\n      });\n\n    default:\n      return state;\n  }\n}\n\nconst allReducers = combineReducers({\n  user: userReducer\n}); //export一个创建store的函数，每次生成的store都是新的\n\nexport default function initializeStore(state) {\n  const store = createStore(allReducers, _objectSpread({\n    user: userInitialState\n  }, state), composeWithDevTools(applyMiddleware(ReduxThunk)));\n  return store;\n}","map":{"version":3,"sources":["D:/编程/项目/next项目/next-github/store/store.js"],"names":["createStore","combineReducers","applyMiddleware","ReduxThunk","composeWithDevTools","userInitialState","UPDATE_USERNAME","userReducer","state","action","type","username","name","allReducers","user","initializeStore","store"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,MAAMC,gBAAgB,GAAG,EAAzB;AAEA,MAAMC,eAAe,GAAG,iBAAxB;;AACA,SAASC,WAAT,CAAqBC,KAAK,GAAGH,gBAA7B,EAA+CI,MAA/C,EAAuD;AACtD,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKJ,eAAL;AACC,+BACIE,KADJ;AAECG,QAAAA,QAAQ,EAAEF,MAAM,CAACG;AAFlB;;AAID;AACC,aAAOJ,KAAP;AAPF;AASA;;AAED,MAAMK,WAAW,GAAGZ,eAAe,CAAC;AACnCa,EAAAA,IAAI,EAAEP;AAD6B,CAAD,CAAnC,C,CAIA;;AACA,eAAe,SAASQ,eAAT,CAAyBP,KAAzB,EAAgC;AAC9C,QAAMQ,KAAK,GAAGhB,WAAW,CACxBa,WADwB;AAEtBC,IAAAA,IAAI,EAAET;AAFgB,KAEKG,KAFL,GAGxBJ,mBAAmB,CAACF,eAAe,CAACC,UAAD,CAAhB,CAHK,CAAzB;AAMA,SAAOa,KAAP;AACA","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport ReduxThunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nconst userInitialState = {}\r\n\r\nconst UPDATE_USERNAME = 'UPDATE_USERNAME'\r\nfunction userReducer(state = userInitialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase UPDATE_USERNAME:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tusername: action.name,\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nconst allReducers = combineReducers({\r\n\tuser: userReducer,\r\n})\r\n\r\n//export一个创建store的函数，每次生成的store都是新的\r\nexport default function initializeStore(state) {\r\n\tconst store = createStore(\r\n\t\tallReducers,\r\n\t\t{ user: userInitialState, ...state },\r\n\t\tcomposeWithDevTools(applyMiddleware(ReduxThunk)),\r\n\t)\r\n\r\n\treturn store\r\n}"]},"metadata":{},"sourceType":"module"}