{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nconst userInitialState = {\n  username: 'jokcy'\n};\nconst UPDATE_USERNAME = 'UPDATE_USERNAME';\n\nfunction userReducer(state = userInitialState, action) {\n  switch (action.type) {\n    case UPDATE_USERNAME:\n      return _objectSpread({}, state, {\n        username: action.name\n      });\n\n    default:\n      return state;\n  }\n}\n\nconst allReducers = combineReducers({\n  user: userReducer\n}); //export一个创建store的函数，每次生成的store都是新的\n\nexport default function initializeStore(state) {\n  const store = createStore(allReducers, Object.assign({}, {\n    user: userInitialState\n  }, state), composeWithDevTools(applyMiddleware(ReduxThunk)));\n  return store;\n}","map":{"version":3,"sources":["D:/编程/项目/next项目/next-github/store/store.js"],"names":["createStore","combineReducers","applyMiddleware","ReduxThunk","composeWithDevTools","userInitialState","username","UPDATE_USERNAME","userReducer","state","action","type","name","allReducers","user","initializeStore","store","Object","assign"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,QAAQ,EAAE;AADa,CAAzB;AAIA,MAAMC,eAAe,GAAG,iBAAxB;;AACA,SAASC,WAAT,CAAqBC,KAAK,GAAGJ,gBAA7B,EAA+CK,MAA/C,EAAuD;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKJ,eAAL;AACE,+BACKE,KADL;AAEEH,QAAAA,QAAQ,EAAEI,MAAM,CAACE;AAFnB;;AAIF;AACE,aAAOH,KAAP;AAPJ;AASD;;AAED,MAAMI,WAAW,GAAGZ,eAAe,CAAC;AAClCa,EAAAA,IAAI,EAAEN;AAD4B,CAAD,CAAnC,C,CAKA;;AACA,eAAe,SAASO,eAAT,CAAyBN,KAAzB,EAAgC;AAC7C,QAAMO,KAAK,GAAGhB,WAAW,CACvBa,WADuB,EAEvBI,MAAM,CAACC,MAAP,CACE,EADF,EAEE;AACEJ,IAAAA,IAAI,EAAET;AADR,GAFF,EAKEI,KALF,CAFuB,EASvBL,mBAAmB,CAACF,eAAe,CAACC,UAAD,CAAhB,CATI,CAAzB;AAYA,SAAOa,KAAP;AACD","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport ReduxThunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nconst userInitialState = {\r\n  username: 'jokcy',\r\n}\r\n\r\nconst UPDATE_USERNAME = 'UPDATE_USERNAME'\r\nfunction userReducer(state = userInitialState, action) {\r\n  switch (action.type) {\r\n    case UPDATE_USERNAME:\r\n      return {\r\n        ...state,\r\n        username: action.name,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst allReducers = combineReducers({\r\n  user: userReducer,\r\n})\r\n\r\n\r\n//export一个创建store的函数，每次生成的store都是新的\r\nexport default function initializeStore(state) {\r\n  const store = createStore(\r\n    allReducers,\r\n    Object.assign(\r\n      {},\r\n      {\r\n        user: userInitialState,\r\n      },\r\n      state,\r\n    ),\r\n    composeWithDevTools(applyMiddleware(ReduxThunk)),\r\n  )\r\n\r\n  return store\r\n}"]},"metadata":{},"sourceType":"module"}