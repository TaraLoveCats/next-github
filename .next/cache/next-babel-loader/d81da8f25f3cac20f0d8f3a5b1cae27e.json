{"ast":null,"code":"import _Row from \"antd/lib/row\";\nimport _Col from \"antd/lib/col\";\nimport _List from \"antd/lib/list\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useRouter } from 'next/router';\nimport { memo } from 'react';\nimport Link from 'next/link';\n\nconst api = require('../lib/api');\n\nconst LANGUAGES = ['JavaScript', 'TypeScript', 'HTML', 'CSS', 'Java', 'Rust', 'Python'];\nconst SORT_TYPES = [{\n  name: 'Best Match'\n}, {\n  name: 'Most Stars',\n  value: 'stars',\n  order: 'desc'\n}, {\n  name: 'Fewest Stars',\n  value: 'stars',\n  order: 'asc'\n}, {\n  name: 'Most Forks',\n  value: 'forks',\n  order: 'desc'\n}, {\n  name: 'Fewest Forks',\n  value: 'forks',\n  order: 'asc'\n}];\nconst selectedItemStyle = {\n  borderLeft: '2px solid #e36209',\n  fontWeight: 100\n};\nconst FilterLink = memo(({\n  name,\n  query,\n  lang,\n  sort,\n  order\n}) => {\n  let queryString = `?query=${query}`;\n  lang && (queryString += `&lang=${lang}`);\n  sort && (queryString += `&sort=${sort}&order=${order || 'desc'}`); // page && (queryString += `&page=${page}`);\n\n  return __jsx(Link, {\n    href: `/search${queryString}`\n  }, __jsx(\"a\", null, name));\n});\nexport default function Search({\n  repos\n}) {\n  const router = useRouter();\n  const querys = Object.assign({}, router.query);\n  const {\n    sort,\n    order,\n    lang\n  } = router.query;\n  return __jsx(React.Fragment, null, __jsx(_Row, {\n    gutter: 20\n  }, __jsx(_Col, {\n    span: 6\n  }, __jsx(_List, {\n    bordered: true,\n    header: __jsx(\"span\", {\n      className: \"list-header\"\n    }, \"Languages\"),\n    style: {\n      marginBottom: 20\n    },\n    dataSource: LANGUAGES,\n    renderItem: item => {\n      const selected = item === lang;\n      return __jsx(_List.Item, {\n        style: selected ? selectedItemStyle : null\n      }, selected ? __jsx(\"span\", null, item) : __jsx(FilterLink, _extends({}, querys, {\n        lang: lang,\n        name: item\n      })));\n    }\n  }), __jsx(_List, {\n    bordered: true,\n    header: __jsx(\"span\", {\n      className: \"list-header\"\n    }, \"Sort By\"),\n    dataSource: SORT_TYPES,\n    renderItem: item => {\n      let selected;\n\n      if (item.name === 'Best Match' && !sort) {\n        selected = true;\n      } else if (item.name === sort && item.order === order) {\n        selected = true;\n      }\n\n      return __jsx(_List.Item, {\n        style: selected ? selectedItemStyle : null\n      }, selected ? __jsx(\"span\", null, item.name) : __jsx(FilterLink, _extends({}, querys, {\n        name: item.name,\n        sort: item.sort,\n        order: item.order\n      })));\n    }\n  }))));\n}\n\nSearch.getInitialProps = async ({\n  query,\n  req,\n  res\n}) => {\n  console.log('Search getInitialProps called');\n  const {\n    q,\n    sort,\n    lang,\n    order,\n    page\n  } = query;\n\n  if (!q) {\n    return {\n      repos: {\n        total_count: 0\n      }\n    };\n  } // ?q=react+language:javascript&sort=stars&order=desc&page=2\n\n\n  let queryString = `?q=${q}`;\n  lang && (queryString += `+language:${lang}`);\n  sort && (queryString += `&sort=${sort}&order=${order || 'desc'}`);\n  page && (queryString += `&page=${page}`);\n  const result = api.request({\n    url: `/search/repositories${queryString}`\n  }, req, res);\n  return {\n    repos: result.data\n  };\n};","map":{"version":3,"sources":["D:/编程/项目/next项目/next-github/pages/search.js"],"names":["useRouter","memo","Link","api","require","LANGUAGES","SORT_TYPES","name","value","order","selectedItemStyle","borderLeft","fontWeight","FilterLink","query","lang","sort","queryString","Search","repos","router","querys","marginBottom","item","selected","getInitialProps","req","res","console","log","q","page","total_count","result","request","url","data"],"mappings":"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","sourcesContent":["import { useRouter } from 'next/router'\r\nimport { memo } from 'react'\r\nimport { Row, Col, List } from 'antd'\r\nimport Link from 'next/link'\r\nconst api = require('../lib/api')\r\n\r\nconst LANGUAGES = ['JavaScript', 'TypeScript', 'HTML', 'CSS', 'Java', 'Rust', 'Python'];\r\nconst SORT_TYPES = [\r\n  {\r\n    name: 'Best Match',\r\n  },\r\n  {\r\n    name: 'Most Stars',\r\n    value: 'stars',\r\n    order: 'desc',\r\n  },\r\n  {\r\n    name: 'Fewest Stars',\r\n    value: 'stars',\r\n    order: 'asc',\r\n  },\r\n  {\r\n    name: 'Most Forks',\r\n    value: 'forks',\r\n    order: 'desc',\r\n  },\r\n  {\r\n    name: 'Fewest Forks',\r\n    value: 'forks',\r\n    order: 'asc',\r\n  },\r\n];\r\nconst selectedItemStyle = {\r\n    borderLeft: '2px solid #e36209',\r\n    fontWeight: 100,\r\n  }\r\n\r\nconst FilterLink = memo(({ name, query, lang, sort, order }) => {\r\n    let queryString = `?query=${query}`;\r\n    lang && (queryString += `&lang=${lang}`);\r\n    sort && (queryString += `&sort=${sort}&order=${order || 'desc'}`);\r\n    // page && (queryString += `&page=${page}`);\r\n    return (\r\n        <Link href={`/search${queryString}`}>\r\n            <a>{name}</a>\r\n        </Link>\r\n    )\r\n})\r\n\r\nexport default function Search({ repos }) {\r\n    const router = useRouter();\r\n    const { ...querys } = router.query;\r\n    const { sort, order, lang } = router.query;\r\n\r\n    return (\r\n        <>\r\n            <Row gutter={20}>\r\n                <Col span={6}>\r\n                    <List \r\n                        bordered\r\n                        header={<span className=\"list-header\">Languages</span>}\r\n                        style={{ marginBottom: 20 }}\r\n                        dataSource={LANGUAGES}\r\n                        renderItem={item => {\r\n                            const selected = item === lang;\r\n                            return  (\r\n                                <List.Item style={selected ? selectedItemStyle : null}>\r\n                                    {selected ? <span>{item}</span> : \r\n                                        <FilterLink \r\n                                            {...querys}\r\n                                            lang={lang}\r\n                                            name={item}\r\n                                        />\r\n                                    }\r\n                                </List.Item>\r\n                        )}}\r\n                    />\r\n\r\n                    <List \r\n                        bordered\r\n                        header={<span className=\"list-header\">Sort By</span>}\r\n                        dataSource={SORT_TYPES}\r\n                        renderItem={item => {\r\n                            let selected;\r\n                            if (item.name === 'Best Match' && !sort) {\r\n                                selected = true;\r\n                            } else if (item.name === sort && item.order === order) {\r\n                                selected = true;\r\n                            }\r\n                            return (\r\n                                <List.Item style={selected ? selectedItemStyle : null}>\r\n                                {selected ? <span>{item.name}</span> : \r\n                                    <FilterLink \r\n                                        {...querys}\r\n                                        name={item.name}\r\n                                        sort={item.sort}\r\n                                        order={item.order}\r\n                                    />\r\n                                }\r\n                                </List.Item>\r\n                        )}}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nSearch.getInitialProps = async ({ query, req, res }) => {\r\n    console.log('Search getInitialProps called')\r\n    const { q, sort, lang, order, page} = query\r\n    if (!q) {\r\n        return {\r\n            repos: {\r\n                total_count: 0\r\n            }\r\n        }\r\n    }\r\n    // ?q=react+language:javascript&sort=stars&order=desc&page=2\r\n    let queryString = `?q=${q}`;\r\n    lang && (queryString += `+language:${lang}`);\r\n    sort && (queryString += `&sort=${sort}&order=${order || 'desc'}`);\r\n    page && (queryString += `&page=${page}`);\r\n\r\n    const result = api.request({\r\n        url: `/search/repositories${queryString}`\r\n    }, req, res)\r\n\r\n    return {\r\n        repos: result.data\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}