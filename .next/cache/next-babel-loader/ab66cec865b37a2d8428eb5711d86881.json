{"ast":null,"code":"import _Row from \"antd/lib/row\";\nimport _Col from \"antd/lib/col\";\nimport _List from \"antd/lib/list\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter, Router } from 'next/router';\nimport Link from 'next/link';\n\nconst api = require('../lib/api');\n\nconst LANGUAGES = ['JavaScript', 'TypeScript', 'HTML', 'CSS', 'Java', 'Rust', 'Python'];\nconst SORT_TYPES = [{\n  name: 'Best Match'\n}, {\n  name: 'Most Stars',\n  value: 'stars',\n  order: 'desc'\n}, {\n  name: 'Fewest Stars',\n  value: 'stars',\n  order: 'asc'\n}, {\n  name: 'Most Forks',\n  value: 'forks',\n  order: 'desc'\n}, {\n  name: 'Fewest Forks',\n  value: 'forks',\n  order: 'asc'\n}];\nconst selectedItemStyle = {\n  borderLeft: '2px solid #e36209',\n  fontWeight: 100\n};\nexport default function Search({\n  repos\n}) {\n  const router = useRouter();\n  const {\n    sort,\n    order,\n    lang,\n    query\n  } = router.query;\n\n  const handleLanguageChange = language => {\n    Router.push({\n      pathname: '/search',\n      query: {\n        query,\n        lang: language,\n        sort,\n        order\n      }\n    });\n  };\n\n  const handleSortChange = sort => {\n    Router.push({\n      pathname: '/search',\n      query: {\n        query,\n        lang,\n        sort: sort,\n        order\n      }\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(_Row, {\n    gutter: 20\n  }, __jsx(_Col, {\n    span: 6\n  }, __jsx(_List, {\n    bordered: true,\n    header: __jsx(\"span\", {\n      className: \"list-header\"\n    }, \"Languages\"),\n    style: {\n      marginBottom: 20\n    },\n    dataSource: LANGUAGES,\n    renderItem: item => {\n      const selected = item === lang;\n      return __jsx(_List.Item, {\n        style: selected ? selectedItemStyle : null\n      }, __jsx(\"a\", {\n        onClick: () => handleLanguageChange(item)\n      }, item));\n    }\n  }), __jsx(_List, {\n    bordered: true,\n    header: __jsx(\"span\", {\n      className: \"list-header\"\n    }, \"Sort By\"),\n    dataSource: SORT_TYPES,\n    renderItem: item => {\n      let selected;\n\n      if (item.name === 'Best Match' && !sort) {\n        selected = true;\n      } else if (item.name === sort && item.order === order) {\n        selected = true;\n      }\n\n      return __jsx(_List.Item, {\n        style: selected ? selectedItemStyle : null\n      }, __jsx(\"a\", {\n        onClick: () => handleSortChange(item)\n      }, item.name));\n    }\n  }))));\n}\n\nSearch.getInitialProps = async ({\n  ctx\n}) => {\n  const {\n    query,\n    sort,\n    lang,\n    order,\n    page\n  } = ctx.query;\n\n  if (!query) {\n    return {\n      repos: {\n        total_count: 0\n      }\n    };\n  } // ?q=react+language:javascript&sort=stars&order=desc&page=2\n\n\n  let queryString = `/?q=${query}`;\n  lang && (queryString += `+language:${lang}`);\n  sort && (queryString += `&sort=${sort}&order=${order || 'desc'}`);\n  page && (queryString += `&page=${page}`);\n  const result = api.request({\n    url: `/search/repositories${queryString}`\n  }, ctx.req, ctx.res);\n  return {\n    repos: result.data\n  };\n};","map":{"version":3,"sources":["D:/编程/项目/next项目/next-github/pages/search.js"],"names":["useRouter","Router","Link","api","require","LANGUAGES","SORT_TYPES","name","value","order","selectedItemStyle","borderLeft","fontWeight","Search","repos","router","sort","lang","query","handleLanguageChange","language","push","pathname","handleSortChange","marginBottom","item","selected","getInitialProps","ctx","page","total_count","queryString","result","request","url","req","res","data"],"mappings":"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","sourcesContent":["import { useRouter, Router } from 'next/router'\r\nimport { Row, Col, List } from 'antd'\r\nimport Link from 'next/link'\r\nconst api = require('../lib/api')\r\n\r\nconst LANGUAGES = ['JavaScript', 'TypeScript', 'HTML', 'CSS', 'Java', 'Rust', 'Python'];\r\nconst SORT_TYPES = [\r\n  {\r\n    name: 'Best Match',\r\n  },\r\n  {\r\n    name: 'Most Stars',\r\n    value: 'stars',\r\n    order: 'desc',\r\n  },\r\n  {\r\n    name: 'Fewest Stars',\r\n    value: 'stars',\r\n    order: 'asc',\r\n  },\r\n  {\r\n    name: 'Most Forks',\r\n    value: 'forks',\r\n    order: 'desc',\r\n  },\r\n  {\r\n    name: 'Fewest Forks',\r\n    value: 'forks',\r\n    order: 'asc',\r\n  },\r\n];\r\nconst selectedItemStyle = {\r\n    borderLeft: '2px solid #e36209',\r\n    fontWeight: 100,\r\n  }\r\n\r\nexport default function Search({ repos }) {\r\n    const router = useRouter();\r\n    const { sort, order, lang, query } = router.query\r\n\r\n    const handleLanguageChange = (language) => {\r\n        Router.push({\r\n            pathname: '/search',\r\n            query: {\r\n                query,\r\n                lang: language,\r\n                sort,\r\n                order,\r\n            }\r\n        })\r\n    }\r\n    const handleSortChange = (sort) => {\r\n        Router.push({\r\n            pathname: '/search',\r\n            query: {\r\n                query,\r\n                lang,\r\n                sort: sort,\r\n                order,\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row gutter={20}>\r\n                <Col span={6}>\r\n                    <List \r\n                        bordered\r\n                        header={<span className=\"list-header\">Languages</span>}\r\n                        style={{ marginBottom: 20 }}\r\n                        dataSource={LANGUAGES}\r\n                        renderItem={item => {\r\n                            const selected = item === lang;\r\n                           return  (\r\n                                <List.Item style={selected ? selectedItemStyle : null}>\r\n                                    {/* <Link href=\"/search\"> */}\r\n                                        <a onClick={() => handleLanguageChange(item)}>{item}</a>\r\n                                    {/* </Link> */}\r\n                                </List.Item>\r\n                        )}}\r\n                    />\r\n\r\n                    <List \r\n                        bordered\r\n                        header={<span className=\"list-header\">Sort By</span>}\r\n                        dataSource={SORT_TYPES}\r\n                        renderItem={item => {\r\n                            let selected;\r\n                            if (item.name === 'Best Match' && !sort) {\r\n                                selected = true;\r\n                            } else if (item.name === sort && item.order === order) {\r\n                                selected = true;\r\n                            }\r\n                            return (\r\n                                <List.Item style={selected ? selectedItemStyle : null}>\r\n                                    {/* <Link href=\"/search\"> */}\r\n                                        <a onClick={() => handleSortChange(item)}>{item.name}</a>\r\n                                    {/* </Link> */}\r\n                                </List.Item>\r\n                        )}}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nSearch.getInitialProps = async ({ ctx }) => {\r\n    const { query, sort, lang, order, page} = ctx.query\r\n    if (!query) {\r\n        return {\r\n            repos: {\r\n                total_count: 0\r\n            }\r\n        }\r\n    }\r\n    // ?q=react+language:javascript&sort=stars&order=desc&page=2\r\n    let queryString = `/?q=${query}`;\r\n    lang && (queryString += `+language:${lang}`);\r\n    sort && (queryString += `&sort=${sort}&order=${order || 'desc'}`);\r\n    page && (queryString += `&page=${page}`);\r\n\r\n    const result = api.request({\r\n        url: `/search/repositories${queryString}`\r\n    }, ctx.req, ctx.res)\r\n\r\n    return {\r\n        repos: result.data\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}