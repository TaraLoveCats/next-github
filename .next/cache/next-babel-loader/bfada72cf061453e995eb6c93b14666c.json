{"ast":null,"code":"import _Spin from \"antd/lib/spin\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport App from 'next/app';\nimport 'antd/dist/antd.css'; //add global css\n\nimport Layout from '../components/Layout';\nimport { Provider } from 'react-redux';\nimport withRedux from '../lib/with-redux';\nimport Router from 'next/router';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nlet COLORS = {};\n\nfunction MyApp({\n  Component,\n  pageProps,\n  reduxStore\n}) {\n  console.log('My app rendering'); //Keeping state when navigating pages\n\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n\n  const startLoading = () => {\n    setLoading(true);\n  };\n\n  const stopLoading = () => {\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    Router.events.on('routeChangeStart', startLoading);\n    Router.events.on('routeChangeComplete', stopLoading);\n    Router.events.on('routeChangeError', stopLoading);\n    return () => {\n      Router.events.off('routeChangeStart', startLoading);\n      Router.events.off('routeChangeComplete', stopLoading);\n      Router.events.off('routeChangeError', stopLoading);\n    };\n  }, []);\n  useEffect(() => {\n    axios.get('/colors').then(resp => COLORS = resp.data).catch(err => console.log(err));\n  }, []);\n  return __jsx(Provider, {\n    store: reduxStore\n  }, __jsx(Layout, null, __jsx(_Spin, {\n    tip: \"loading...\",\n    spinning: loading\n  }, __jsx(Component, _extends({}, pageProps, {\n    colors: COLORS\n  })))));\n} //define this method because blocking data requirements are needed\n//for every single page in this application\n\n\nMyApp.getInitialProps = async appContext => {\n  console.log('app init'); //calls page's `getInitialProps` and fills `appProps.pageProps` \n\n  const appProps = await App.getInitialProps(appContext);\n  return _objectSpread({}, appProps);\n};\n\nexport default withRedux(MyApp);","map":{"version":3,"sources":["D:/编程/项目/next项目/next-github/pages/_app.js"],"names":["App","Layout","Provider","withRedux","Router","useState","useEffect","axios","COLORS","MyApp","Component","pageProps","reduxStore","console","log","loading","setLoading","startLoading","stopLoading","events","on","off","get","then","resp","data","catch","err","getInitialProps","appContext","appProps"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAO,oBAAP,C,CAA4B;;AAC5B,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,IAAIC,MAAM,GAAG,EAAb;;AACA,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,CAAf,EAAqD;AACjDC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EADiD,CAEjD;;AACA,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBX,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMY,YAAY,GAAG,MAAM;AACvBD,IAAAA,UAAU,CAAC,IAAD,CAAV;AACH,GAFD;;AAGA,QAAME,WAAW,GAAG,MAAM;AACtBF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAFD;;AAIAV,EAAAA,SAAS,CAAC,MAAM;AACZF,IAAAA,MAAM,CAACe,MAAP,CAAcC,EAAd,CAAiB,kBAAjB,EAAqCH,YAArC;AACAb,IAAAA,MAAM,CAACe,MAAP,CAAcC,EAAd,CAAiB,qBAAjB,EAAwCF,WAAxC;AACAd,IAAAA,MAAM,CAACe,MAAP,CAAcC,EAAd,CAAiB,kBAAjB,EAAqCF,WAArC;AACA,WAAO,MAAM;AACTd,MAAAA,MAAM,CAACe,MAAP,CAAcE,GAAd,CAAkB,kBAAlB,EAAsCJ,YAAtC;AACAb,MAAAA,MAAM,CAACe,MAAP,CAAcE,GAAd,CAAkB,qBAAlB,EAAyCH,WAAzC;AACAd,MAAAA,MAAM,CAACe,MAAP,CAAcE,GAAd,CAAkB,kBAAlB,EAAsCH,WAAtC;AACH,KAJD;AAKH,GATQ,EASN,EATM,CAAT;AAWAZ,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,KAAK,CAACe,GAAN,CAAU,SAAV,EACKC,IADL,CACUC,IAAI,IAAIhB,MAAM,GAAGgB,IAAI,CAACC,IADhC,EAEKC,KAFL,CAEWC,GAAG,IAAId,OAAO,CAACC,GAAR,CAAYa,GAAZ,CAFlB;AAGH,GAJQ,EAIN,EAJM,CAAT;AAMA,SACI,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEf;AAAjB,KAEI,MAAC,MAAD,QACI;AAAM,IAAA,GAAG,EAAC,YAAV;AAAuB,IAAA,QAAQ,EAAEG;AAAjC,KACI,MAAC,SAAD,eAAeJ,SAAf;AAA0B,IAAA,MAAM,EAAEH;AAAlC,KADJ,CADJ,CAFJ,CADJ;AAUH,C,CAGD;AACA;;;AACAC,KAAK,CAACmB,eAAN,GAAwB,MAAOC,UAAP,IAAsB;AAC1ChB,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAD0C,CAE1C;;AACA,QAAMgB,QAAQ,GAAG,MAAM9B,GAAG,CAAC4B,eAAJ,CAAoBC,UAApB,CAAvB;AAEA,2BACOC,QADP;AAGH,CARD;;AAUA,eAAe3B,SAAS,CAACM,KAAD,CAAxB","sourcesContent":["import App from 'next/app'\r\nimport 'antd/dist/antd.css' //add global css\r\nimport Layout from '../components/Layout'\r\nimport { Provider } from 'react-redux'  \r\nimport withRedux from '../lib/with-redux'\r\nimport Router from 'next/router'\r\nimport { Spin } from 'antd'\r\nimport { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\n\r\nlet COLORS = {};\r\nfunction MyApp({ Component, pageProps, reduxStore }) {\r\n    console.log('My app rendering');\r\n    //Keeping state when navigating pages\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const startLoading = () => {\r\n        setLoading(true)\r\n    }\r\n    const stopLoading = () => {\r\n        setLoading(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        Router.events.on('routeChangeStart', startLoading)\r\n        Router.events.on('routeChangeComplete', stopLoading)\r\n        Router.events.on('routeChangeError', stopLoading)\r\n        return () => {\r\n            Router.events.off('routeChangeStart', startLoading)\r\n            Router.events.off('routeChangeComplete', stopLoading)\r\n            Router.events.off('routeChangeError', stopLoading)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        axios.get('/colors')\r\n            .then(resp => COLORS = resp.data)\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n\r\n    return (\r\n        <Provider store={reduxStore}>\r\n            {/* Persisting layout between page changes */}\r\n            <Layout>\r\n                <Spin tip=\"loading...\" spinning={loading}>\r\n                    <Component {...pageProps} colors={COLORS}/>\r\n                </Spin>\r\n            </Layout>\r\n        </Provider>\r\n    )\r\n}\r\n\r\n\r\n//define this method because blocking data requirements are needed\r\n//for every single page in this application\r\nMyApp.getInitialProps = async (appContext) => {\r\n    console.log('app init')\r\n    //calls page's `getInitialProps` and fills `appProps.pageProps` \r\n    const appProps = await App.getInitialProps(appContext);\r\n\r\n    return {\r\n        ...appProps,\r\n    }\r\n}\r\n\r\nexport default withRedux(MyApp)"]},"metadata":{},"sourceType":"module"}