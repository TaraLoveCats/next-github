{"ast":null,"code":"import _Row from \"antd/lib/row\";\nimport _Pagination from \"antd/lib/pagination\";\nimport _Col from \"antd/lib/col\";\nimport _List from \"antd/lib/list\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useRouter } from 'next/router';\nimport { memo } from 'react';\nimport Link from 'next/link';\nimport Repo from '../components/Repo';\n\nconst api = require('../lib/api');\n\nconst LANGUAGES = ['JavaScript', 'TypeScript', 'HTML', 'CSS', 'Java', 'Rust', 'Python'];\nconst SORT_TYPES = [{\n  name: 'Best Match'\n}, {\n  name: 'Most Stars',\n  value: 'stars',\n  order: 'desc'\n}, {\n  name: 'Fewest Stars',\n  value: 'stars',\n  order: 'asc'\n}, {\n  name: 'Most Forks',\n  value: 'forks',\n  order: 'desc'\n}, {\n  name: 'Fewest Forks',\n  value: 'forks',\n  order: 'asc'\n}];\nconst per_page = 20;\nconst selectedItemStyle = {\n  borderLeft: '2px solid #e36209',\n  fontWeight: 100\n};\nconst FilterLink = memo(({\n  name,\n  query,\n  lang,\n  sort,\n  order,\n  page\n}) => {\n  let queryString = `?query=${query}`;\n  lang && (queryString += `&lang=${lang}`);\n  sort && (queryString += `&sort=${sort}&order=${order || 'desc'}`);\n  page && (queryString += `&page=${page}`);\n  queryString += `&per_page=${per_page}`;\n  console.log(name);\n  return __jsx(Link, {\n    href: `/search${queryString}`\n  }, __jsx(\"a\", null, name));\n});\nexport default function Search({\n  repos\n}) {\n  console.log(repos);\n  const router = useRouter();\n  const querys = Object.assign({}, router.query);\n  const {\n    sort,\n    order,\n    lang,\n    page\n  } = router.query;\n  return __jsx(React.Fragment, null, __jsx(_Row, {\n    gutter: 20\n  }, __jsx(_Col, {\n    span: 6\n  }, __jsx(_List, {\n    bordered: true,\n    header: __jsx(\"span\", {\n      className: \"list-header\"\n    }, \"Languages\"),\n    style: {\n      marginBottom: 20\n    },\n    dataSource: LANGUAGES,\n    renderItem: item => {\n      const selected = item === lang;\n      return __jsx(_List.Item, {\n        style: selected ? selectedItemStyle : null\n      }, selected ? __jsx(\"span\", null, item) : __jsx(FilterLink, _extends({}, querys, {\n        lang: lang,\n        name: item\n      })));\n    }\n  }), __jsx(_List, {\n    bordered: true,\n    header: __jsx(\"span\", {\n      className: \"list-header\"\n    }, \"Sort By\"),\n    dataSource: SORT_TYPES,\n    renderItem: item => {\n      let selected;\n\n      if (item.name === 'Best Match' && !sort) {\n        selected = true;\n      } else if (item.name === sort && item.order === order) {\n        selected = true;\n      }\n\n      return __jsx(_List.Item, {\n        style: selected ? selectedItemStyle : null\n      }, selected ? __jsx(\"span\", null, item.name) : __jsx(FilterLink, _extends({}, querys, {\n        name: item.name,\n        sort: item.sort,\n        order: item.order\n      })));\n    }\n  })), __jsx(_Col, {\n    span: 18\n  }, __jsx(\"h3\", {\n    className: \"repos-title\"\n  }, repos.total_count, \" \\u4E2A\\u4ED3\\u5E93\"), repos.items.map(repo => __jsx(Repo, {\n    repo: repo,\n    key: repo.id\n  })), __jsx(\"div\", null, __jsx(_Pagination, {\n    pageSize: 30,\n    current: +page || 1,\n    total: repos.total_count,\n    itemRender: (page, type, ol) => {\n      const p = type === 'page' ? page : type === 'prev' ? page - 1 : page + 1;\n      const name = type === 'page' ? page : ol;\n      return __jsx(FilterLink, _extends({}, querys, {\n        page: p,\n        name: name\n      }));\n    }\n  })))));\n}\n\nSearch.getInitialProps = async ({\n  query,\n  req,\n  res\n}) => {\n  console.log('Search getInitialProps called');\n  const {\n    q,\n    sort,\n    lang,\n    order,\n    page\n  } = query;\n\n  if (!q) {\n    return {\n      repos: {\n        total_count: 0\n      }\n    };\n  } // ?q=react+language:javascript&sort=stars&order=desc&page=2\n\n\n  let queryString = `?q=${q}`;\n  lang && (queryString += `+language:${lang}`);\n  sort && (queryString += `&sort=${sort}&order=${order || 'desc'}`);\n  page && (queryString += `&page=${page}`);\n  queryString += `&per_page=${per_page}`;\n  const result = api.request({\n    url: `/search/repositories${queryString}`\n  }, req, res);\n  return {\n    repos: result.data\n  };\n};","map":{"version":3,"sources":["D:/编程/项目/next项目/next-github/pages/search.js"],"names":["useRouter","memo","Link","Repo","api","require","LANGUAGES","SORT_TYPES","name","value","order","per_page","selectedItemStyle","borderLeft","fontWeight","FilterLink","query","lang","sort","page","queryString","console","log","Search","repos","router","querys","marginBottom","item","selected","total_count","items","map","repo","id","type","ol","p","getInitialProps","req","res","q","result","request","url","data"],"mappings":"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","sourcesContent":["import { useRouter } from 'next/router'\r\nimport { memo } from 'react'\r\nimport { Row, Col, List, Pagination } from 'antd'\r\nimport Link from 'next/link'\r\nimport Repo from '../components/Repo'\r\nconst api = require('../lib/api')\r\n\r\nconst LANGUAGES = ['JavaScript', 'TypeScript', 'HTML', 'CSS', 'Java', 'Rust', 'Python'];\r\nconst SORT_TYPES = [\r\n  {\r\n    name: 'Best Match',\r\n  },\r\n  {\r\n    name: 'Most Stars',\r\n    value: 'stars',\r\n    order: 'desc',\r\n  },\r\n  {\r\n    name: 'Fewest Stars',\r\n    value: 'stars',\r\n    order: 'asc',\r\n  },\r\n  {\r\n    name: 'Most Forks',\r\n    value: 'forks',\r\n    order: 'desc',\r\n  },\r\n  {\r\n    name: 'Fewest Forks',\r\n    value: 'forks',\r\n    order: 'asc',\r\n  },\r\n];\r\nconst per_page = 20;\r\nconst selectedItemStyle = {\r\n    borderLeft: '2px solid #e36209',\r\n    fontWeight: 100,\r\n  }\r\n\r\nconst FilterLink = memo(({ name, query, lang, sort, order, page }) => {\r\n    let queryString = `?query=${query}`;\r\n    lang && (queryString += `&lang=${lang}`);\r\n    sort && (queryString += `&sort=${sort}&order=${order || 'desc'}`);\r\n    page && (queryString += `&page=${page}`);\r\n    queryString += `&per_page=${per_page}`;\r\n    console.log(name)\r\n    return (\r\n        <Link href={`/search${queryString}`}>\r\n            <a>{name}</a>\r\n        </Link>\r\n    )\r\n})\r\n\r\nexport default function Search({ repos }) {\r\n    console.log(repos)\r\n    const router = useRouter();\r\n    const { ...querys } = router.query;\r\n    const { sort, order, lang, page } = router.query;\r\n\r\n    return (\r\n        <>\r\n            <Row gutter={20}>\r\n                <Col span={6}>\r\n                    <List \r\n                        bordered\r\n                        header={<span className=\"list-header\">Languages</span>}\r\n                        style={{ marginBottom: 20 }}\r\n                        dataSource={LANGUAGES}\r\n                        renderItem={item => {\r\n                            const selected = item === lang;\r\n                            return  (\r\n                                <List.Item style={selected ? selectedItemStyle : null}>\r\n                                    {selected ? <span>{item}</span> : \r\n                                        <FilterLink \r\n                                            {...querys}\r\n                                            lang={lang}\r\n                                            name={item}\r\n                                        />\r\n                                    }\r\n                                </List.Item>\r\n                        )}}\r\n                    />\r\n\r\n                    <List \r\n                        bordered\r\n                        header={<span className=\"list-header\">Sort By</span>}\r\n                        dataSource={SORT_TYPES}\r\n                        renderItem={item => {\r\n                            let selected;\r\n                            if (item.name === 'Best Match' && !sort) {\r\n                                selected = true;\r\n                            } else if (item.name === sort && item.order === order) {\r\n                                selected = true;\r\n                            }\r\n                            return (\r\n                                <List.Item style={selected ? selectedItemStyle : null}>\r\n                                    {selected ? <span>{item.name}</span> : \r\n                                        <FilterLink \r\n                                            {...querys}\r\n                                            name={item.name}\r\n                                            sort={item.sort}\r\n                                            order={item.order}\r\n                                        />\r\n                                    }\r\n                                </List.Item>\r\n                        )}}\r\n                    />\r\n                </Col>\r\n                <Col span={18}> \r\n                    <h3 className=\"repos-title\">{repos.total_count} 个仓库</h3>\r\n                    {repos.items.map(repo => (\r\n                        <Repo repo={repo} key={repo.id} />\r\n                    ))}\r\n                    <div>\r\n                        <Pagination \r\n                            pageSize={30}\r\n                            current={+page || 1}\r\n                            total={repos.total_count}\r\n                            itemRender={(page, type, ol) => {\r\n                                const p = type === 'page' ? page : type === 'prev' ?  page - 1 : page + 1;\r\n                                const name = type === 'page' ? page : ol;\r\n                                return <FilterLink {...querys} page={p} name={name} />\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nSearch.getInitialProps = async ({ query, req, res }) => {\r\n    console.log('Search getInitialProps called')\r\n    const { q, sort, lang, order, page} = query\r\n    if (!q) {\r\n        return {\r\n            repos: {\r\n                total_count: 0\r\n            }\r\n        }\r\n    }\r\n    // ?q=react+language:javascript&sort=stars&order=desc&page=2\r\n    let queryString = `?q=${q}`;\r\n    lang && (queryString += `+language:${lang}`);\r\n    sort && (queryString += `&sort=${sort}&order=${order || 'desc'}`);\r\n    page && (queryString += `&page=${page}`);\r\n    queryString += `&per_page=${per_page}`;\r\n\r\n    const result = api.request({\r\n        url: `/search/repositories${queryString}`\r\n    }, req, res)\r\n\r\n    return {\r\n        repos: result.data\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}