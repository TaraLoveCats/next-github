{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime-corejs2/regenerator\");\n\nvar axios = require('axios');\n\nvar github_base_url = 'https://api.github.com';\nvar isServer = false; //客户端和服务器端最终调用的方法\n\nfunction requestGithub(method, url, data, headers) {\n  var result;\n  return _regeneratorRuntime.async(function requestGithub$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(axios({\n            method: method,\n            url: \"\".concat(github_base_url).concat(url),\n            data: data,\n            headers: headers\n          }));\n\n        case 3:\n          result = _context.sent;\n\n          if (!(result.status === 200)) {\n            _context.next = 8;\n            break;\n          }\n\n          return _context.abrupt(\"return\", result);\n\n        case 8:\n          console.log('status not ok');\n          return _context.abrupt(\"return\", {\n            data: false,\n            status: result.status\n          });\n\n        case 10:\n          _context.next = 16;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('error caught!'); // console.error(err)\n\n          return _context.abrupt(\"return\", {\n            data: false\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 12]]);\n}\n\nfunction request(_ref, req, res) {\n  var _ref$method, method, url, _ref$data, data, session, githubAuth, headers, token;\n\n  return _regeneratorRuntime.async(function request$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _ref$method = _ref.method, method = _ref$method === void 0 ? 'GET' : _ref$method, url = _ref.url, _ref$data = _ref.data, data = _ref$data === void 0 ? {} : _ref$data;\n          console.log('in request');\n\n          if (url) {\n            _context2.next = 4;\n            break;\n          }\n\n          throw Error('url must be provided');\n\n        case 4:\n          if (!isServer) {\n            _context2.next = 15;\n            break;\n          }\n\n          //是服务端环境直接请求github数据\n          session = req.session;\n          githubAuth = session.githubAuth || {};\n          headers = {};\n          token = githubAuth && githubAuth.access_token;\n\n          if (token) {\n            headers['Authorization'] = \"\".concat(githubAuth.token_type, \" \").concat(token);\n          }\n\n          _context2.next = 12;\n          return _regeneratorRuntime.awrap(requestGithub(method, url, data, headers));\n\n        case 12:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 15:\n          _context2.next = 17;\n          return _regeneratorRuntime.awrap(axios({\n            method: method,\n            url: \"/github\".concat(url),\n            data: data\n          }));\n\n        case 17:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 18:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n}\n\nmodule.exports = {\n  request: request,\n  requestGithub: requestGithub\n};","map":{"version":3,"sources":["D:/编程/项目/next项目/next-github/lib/api.js"],"names":["axios","require","github_base_url","isServer","requestGithub","method","url","data","headers","result","status","console","log","request","req","res","Error","session","githubAuth","token","access_token","token_type","module","exports"],"mappings":";;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMC,eAAe,GAAG,wBAAxB;AACA,IAAMC,QAAQ,QAAd,C,CACA;;AACA,SAAeC,aAAf,CAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,EAAgDC,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAG6BR,KAAK,CAAC;AACvBK,YAAAA,MAAM,EAANA,MADuB;AAEvBC,YAAAA,GAAG,YAAKJ,eAAL,SAAuBI,GAAvB,CAFoB;AAGvBC,YAAAA,IAAI,EAAJA,IAHuB;AAIvBC,YAAAA,OAAO,EAAPA;AAJuB,WAAD,CAHlC;;AAAA;AAGcC,UAAAA,MAHd;;AAAA,gBASYA,MAAM,CAACC,MAAP,KAAkB,GAT9B;AAAA;AAAA;AAAA;;AAAA,2CAUmBD,MAVnB;;AAAA;AAYYE,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AAZZ,2CAamB;AAAEL,YAAAA,IAAI,EAAE,KAAR;AAAeG,YAAAA,MAAM,EAAED,MAAM,CAACC;AAA9B,WAbnB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgBQC,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAhBR,CAiBQ;;AAjBR,2CAkBe;AAAEL,YAAAA,IAAI,EAAE;AAAR,WAlBf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBA,SAAeM,OAAf,OAA0DC,GAA1D,EAA+DC,GAA/D;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAyBV,MAAzB,EAAyBA,MAAzB,4BAAkC,KAAlC,gBAAyCC,GAAzC,QAAyCA,GAAzC,mBAA8CC,IAA9C,EAA8CA,IAA9C,0BAAqD,EAArD;AACII,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AADJ,cAESN,GAFT;AAAA;AAAA;AAAA;;AAAA,gBAGcU,KAAK,CAAC,sBAAD,CAHnB;;AAAA;AAAA,eAKQb,QALR;AAAA;AAAA;AAAA;;AAMQ;AACMc,UAAAA,OAPd,GAOwBH,GAAG,CAACG,OAP5B;AAQcC,UAAAA,UARd,GAQ2BD,OAAO,CAACC,UAAR,IAAsB,EARjD;AAScV,UAAAA,OATd,GASwB,EATxB;AAUcW,UAAAA,KAVd,GAUsBD,UAAU,IAAIA,UAAU,CAACE,YAV/C;;AAWQ,cAAID,KAAJ,EAAW;AACPX,YAAAA,OAAO,CAAC,eAAD,CAAP,aAA8BU,UAAU,CAACG,UAAzC,cAAuDF,KAAvD;AACH;;AAbT;AAAA,2CAcqBf,aAAa,CAACC,MAAD,EAASC,GAAT,EAAcC,IAAd,EAAoBC,OAApB,CAdlC;;AAAA;AAAA;;AAAA;AAAA;AAAA,2CAkBqBR,KAAK,CAAC;AACfK,YAAAA,MAAM,EAANA,MADe;AAEfC,YAAAA,GAAG,mBAAYA,GAAZ,CAFY;AAGfC,YAAAA,IAAI,EAAJA;AAHe,WAAD,CAlB1B;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA0BAe,MAAM,CAACC,OAAP,GAAiB;AACbV,EAAAA,OAAO,EAAPA,OADa;AAEbT,EAAAA,aAAa,EAAbA;AAFa,CAAjB","sourcesContent":["const axios = require('axios')\r\n\r\nconst github_base_url = 'https://api.github.com'\r\nconst isServer = typeof window === 'undefined'\r\n//客户端和服务器端最终调用的方法\r\nasync function requestGithub(method, url, data, headers) {\r\n    // console.log(method, url, data, headers)\r\n    try {\r\n        const result = await axios({\r\n            method,\r\n            url: `${github_base_url}${url}`,\r\n            data,\r\n            headers\r\n        })\r\n        if (result.status === 200) {\r\n            return result\r\n        } else {\r\n            console.log('status not ok')\r\n            return { data: false, status: result.status }\r\n        }\r\n    } catch (err) {\r\n        console.log('error caught!')\r\n        // console.error(err)\r\n        return { data: false }\r\n    }\r\n}\r\n\r\nasync function request({ method = 'GET', url, data = {}}, req, res) {\r\n    console.log('in request')\r\n    if (!url) {\r\n        throw Error('url must be provided')\r\n    }\r\n    if (isServer) {\r\n        //是服务端环境直接请求github数据\r\n        const session = req.session\r\n        const githubAuth = session.githubAuth || {}\r\n        const headers = {}\r\n        const token = githubAuth && githubAuth.access_token\r\n        if (token) {\r\n            headers['Authorization'] = `${githubAuth.token_type} ${token}`\r\n        }\r\n        return await requestGithub(method, url, data, headers)\r\n\r\n    } else {\r\n        //客户端环境使用github api代理（ koa处理server/api ）\r\n        return await axios({\r\n            method,\r\n            url: `/github${url}`,\r\n            data\r\n        })\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    request,\r\n    requestGithub\r\n}"]},"metadata":{},"sourceType":"script"}